import React, { useRef, useState } from "react";

// Optional: Add web3 libraries if needed (ethers.js etc.)
// import { ethers } from "ethers";

type BrowserTab = {
  url: string;
  title: string;
};

export default function MiniWeb3Browser() {
  const [tabs, setTabs] = useState<BrowserTab[]>([
    { url: "https://www.google.com", title: "New Tab" },
  ]);
  const [currentTabIdx, setCurrentTabIdx] = useState(0);
  const [addressBar, setAddressBar] = useState(tabs[0].url);

  const iframeRefs = useRef<(HTMLIFrameElement | null)[]>([]);

  // Navigation
  const go = (url: string) => {
    const newTabs = [...tabs];
    newTabs[currentTabIdx].url = url;
    setTabs(newTabs);
  };

  // Tab Management
  const addTab = () => {
    setTabs([...tabs, { url: "https://www.google.com", title: "New Tab" }]);
    setCurrentTabIdx(tabs.length);
    setAddressBar("https://www.google.com");
  };

  const closeTab = (idx: number) => {
    if (tabs.length === 1) return;
    const newTabs = tabs.filter((_, i) => i !== idx);
    setTabs(newTabs);
    setCurrentTabIdx(Math.max(0, currentTabIdx - (idx <= currentTabIdx ? 1 : 0)));
    setAddressBar(newTabs[Math.max(0, currentTabIdx - (idx <= currentTabIdx ? 1 : 0))].url);
  };

  const handleBarChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setAddressBar(e.target.value);
  };

  const handleBarSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    go(addressBar);
  };

  // Browser Controls
  const reload = () => {
    iframeRefs.current[currentTabIdx]?.contentWindow?.location.reload();
  };

  const goBack = () => {
    iframeRefs.current[currentTabIdx]?.contentWindow?.history.back();
  };

  const goForward = () => {
    iframeRefs.current[currentTabIdx]?.contentWindow?.history.forward();
  };

  // Optional: Add web3 provider injection logic here for dapp compatibility

  return (
    <div style={{ width: "100%", height: "100vh", fontFamily: "sans-serif" }}>
      <div style={{ background: "#eee", padding: 8, display: "flex" }}>
        {tabs.map((tab, idx) => (
          <div
            key={idx}
            style={{
              border: currentTabIdx === idx ? "2px solid #888" : "1px solid #ccc",
              background: currentTabIdx === idx ? "#fff" : "#f4f4f4",
              marginRight: 4,
              padding: "2px 8px",
              borderRadius: 4,
              cursor: "pointer",
              display: "flex",
              alignItems: "center",
            }}
            onClick={() => {
              setCurrentTabIdx(idx);
              setAddressBar(tabs[idx].url);
            }}
          >
            {tab.title || tab.url}
            <button
              onClick={e => {
                e.stopPropagation();
                closeTab(idx);
              }}
              style={{
                marginLeft: 6,
                background: "none",
                border: "none",
                color: "#999",
                cursor: "pointer",
                fontSize: 12,
              }}
            >
              ×
            </button>
          </div>
        ))}
        <button onClick={addTab} style={{ marginLeft: 8 }}>
          ＋
        </button>
      </div>

      <form
        onSubmit={handleBarSubmit}
        style={{
          display: "flex",
          alignItems: "center",
          background: "#fafafa",
          padding: 8,
          borderBottom: "1px solid #ddd",
        }}
      >
        <button type="button" onClick={goBack} title="Back">
          ◀
        </button>
        <button type="button" onClick={goForward} title="Forward" style={{ marginLeft: 4 }}>
          ▶
        </button>
        <button type="button" onClick={reload} title="Reload" style={{ marginLeft: 4 }}>
          ⟳
        </button>
        <input
          type="text"
          value={addressBar}
          onChange={handleBarChange}
          style={{ flex: 1, marginLeft: 8, padding: 6, fontSize: 16 }}
          placeholder="Enter URL"
        />
        <button type="submit" style={{ marginLeft: 6 }}>
          Go
        </button>
      </form>

      <div style={{ height: "calc(100vh - 90px)", width: "100%" }}>
        {tabs.map((tab, idx) => (
          <iframe
            key={idx}
            src={tab.url}
            ref={el => (iframeRefs.current[idx] = el)}
            title={`Browser Tab ${idx}`}
            style={{
              display: idx === currentTabIdx ? "block" : "none",
              width: "100%",
              height: "100%",
              border: "none",
            }}
            sandbox="allow-scripts allow-same-origin allow-forms allow-popups"
          />
        ))}
      </div>
    </div>
  );
}